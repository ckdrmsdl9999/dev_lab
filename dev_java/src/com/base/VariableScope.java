package com.base;
/***********************************************
 *	변수가 영향을 미치는 범위
 * 1)지역변수(Automatic Variable)=로컬변수
 *   메소드 안에서 선언된 변수는 지역변수이다.
 *   메소드의 파라미터로 선언된 변수도 지역변수이다.
 *   자동으로 소멸된다.
 *   메소드 안에서만 사용할 수 있다.
 *   반드시 초기화를 해야 한다.
 * 2)전역변수(global Variable)=멤버변수
 *   메소드 밖 선언부에 선언했을 때
 *   초기화를 생략할 수 있다.
 * 3)정적변수(static Variable)
 * 
 * 메소드를 구현할 수 있다. - 클래스 안에서
 * void methodA(){}
 * 좌중괄호와 우중괄호가 있으면 구현이다.
 * 메소드를 호출할 수 있다. - 클래스 안에서(선언부에서 불가)
 * 메소드 이름뒤에 세미콜론이 오면 호출이다.
 * 내안에 정의된 메소드는 객체생성 없이도 호출할 수 있다.
 * 다른 클래스에 정의된 메소드는 반드시 객체생성을 먼저
 * 해야 호출할 수 있다.
 * 단 static영역에서 non-static 타입의 메소드는 호출
 * 할 수 없다.
 * 해결방법
 * 객체생성하면 내안에 있는 메소드이더라도 호출 할 수 
 * 있다.
 **********************************************/
public class VariableScope {
	//선언부
	//go();
	//int(정수를 담을 수 있다)타입의 변수 x라고 읽는다.
	int x=10;//전역변수, 멤버변수
	//x = 10;
	//double(실수를 담을 수 있다)타입의 변수 pi라고 읽는다.
	double pi;//0.0
	//생성자
	
	//사용자 정의 메소드1
	void go(){
		//insert here - 전역변수 x를 출력하시오.		
		System.out.println("전역변수 x사용:"+x);//0
	}
	//사용자 정의 메소드2
	//파라미터는 사용자가 입력한 값을 받아 온다.
	//파라미터에 선언된 변수도 그 메소드안에서 접근가능
	//파라미터값은 메소드가 호출될 때 결정할 수 있다.
	//따라서 파라미터의 경우에는 별도의 초기화 없이도
	//호출할 때 값이 치환되므로 생략할 수 있다.
	void go2(int x){//파라미터 변수 x=10
		int z;
		x = 20;
		//insert here
		System.out.println(x);//10 -> 20
		go();
	}
	//사용자 정의 메소드3
	//메인메소드
	public static void main(String[] args) {
	//아래 x는 	
		int x;//지역변수-main메소드내에서만 사용가능하다.
		x = 1;//지역변수 초기화
		System.out.println("지역변수 x사용:"+x);//1
		//insert here - go메소드 호출하기
		VariableScope vs = new VariableScope();
		vs.go();//메소드 호출-구현이 아니다.
		//파라미터가 있는 메소드 호출하는 방법
		vs.go2(10);
		//insert here - 전역변수 x를 출력하시오.	
		System.out.println(vs.x);//10출력
	}

}
